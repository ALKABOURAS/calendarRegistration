<div class="user-info-container">
    <div class="user-info-title-container">
        <span class="user-info-title">Οι πληροφορίες μου</span>
    </div>
    <div class="user-info-dets-container">
        <img class="user-info-img" src="/images/profile.svg" alt="User Logo">
        <div class="user-info-dets">
            <div class="user-info-name-container">
                <span class="user-info-name">Όνομα:</span>
                <span class="user-info-name">{{user.username}}</span>
            </div>
            <div class="user-info-appointment-container">
                <span class="user-info-name">Ραντεβού:</span>
                <span class="user-info-name">{{total}}</span>
            </div>
        </div>
    </div>
</div>

<div class="user-info-title-container" style="margin-bottom: 1%">
        <span class="user-info-title">Τα ραντεβού μου</span>
    </div>
<div class="appointment-container">
    {{#if creatorAppointments}}
        {{#each creatorAppointments}}
            {{> appointment}}
        {{/each}}

    {{else}}
        <span class="user-info-name" style="margin: 5%">Δεν έχετε κανένα ραντεβού!</span>
    {{/if}}
</div>
<div class="user-info-title-container" style="margin-bottom: 1%;text-align: center">
        <span class="user-info-title" >Τα ραντεβού που συμμετέχω</span>
    </div>
<div class="appointment-container">
    {{#if participantAppointments}}
        {{#each participantAppointments}}
            {{> appointmentParticipant}}
        {{/each}}

    {{else}}
        <span class="user-info-name" style="margin: 5%">Δεν συμμετέχετε σε κανένα ραντεβού!</span>
    {{/if}}
</div>

<div id="closeAppointmentModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <form id="closeAppointmentForm">
            <label for="title">Τίτλος:</label>
            <input type="text" id="title" name="title" required>
            <label for="date" style="font-size: 20px">Ημ/νία:</label>
            <input type="date" id="date" name="date" required>
            <label for="time" style="font-size: 20px">Ώρα:</label>
            <input type="time" id="time" name="time" required>
            <label for="length">Διάρκεια:</label>
            <input type="number" id="length" name="length" required>
            <br>
            <label for="user_participants">Συμμετέχοντες:</label>
            <input type="text" id="user_participants" name="user_participants">
            <button type="button" id="addParticipant">Προσθήκη</button>
            <button type="submit">Κλείσιμο Ραντεβού</button>
        </form>
    </div>
</div>
<script>
// Get the modal
var modal = document.getElementById("closeAppointmentModal");

// Get the button that opens the modal
var btn = document.getElementById("closeAppointmentBtn");

// Get the <span> element that closes the modal
var span = document.getElementsByClassName("close")[0];

// When the user clicks the button, open the modal
btn.onclick = function() {
  modal.style.display = "block";
}

// When the user clicks on <span> (x), close the modal
span.onclick = function() {
  modal.style.display = "none";
}

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}

document.getElementById('addParticipant').addEventListener('click', function() {
    // Create a new input field
    const newInput = document.createElement('input');
    newInput.type = 'text';
    newInput.name = 'user_participants';

    // Create a new "Remove Participant" button
    const removeButton = document.createElement('button');
    removeButton.textContent = 'Διαγραφή';
    removeButton.type = 'button';
    removeButton.addEventListener('click', function() {
        // Remove the input field and the button
        newInput.remove();
        removeButton.remove();
    });

    // Append the new input field and the button to the form
    const form = document.getElementById('closeAppointmentForm');
    form.insertBefore(newInput, this);
    form.insertBefore(removeButton, this);
});


// Handle form submission
document.getElementById('closeAppointmentForm').addEventListener('submit', function(event) {
    event.preventDefault();
    const title = this.querySelector('input[name="title"]').value;
    const date = this.querySelector('input[name="date"]').value;
    const time = this.querySelector('input[name="time"]').value;
    const length = this.querySelector('input[name="length"]').value;
    const user_creator = "{{user.username}}";

    // Get all participant input fields
    const participantInputs = this.querySelectorAll('input[name="user_participants"]');

    // Create an array of participants
    const user_participants = Array.from(participantInputs).map(input => input.value);

    fetch('/appointments/close', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ title, date, time,length, user_participants, user_creator }),
    })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to close appointment');
                }
            });
});

document.querySelectorAll('.approve-button').forEach(button => {
    button.addEventListener('click', function() {
        const appointmentId = this.dataset.appointmentId;
        fetch(`/appointments/${appointmentId}/response`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ response: 'approved' }),
        })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Appointment approved successfully.');
                    } else {
                        alert('Failed to approve appointment.');
                    }
                });
    });
});

document.querySelectorAll('.reject-button').forEach(button => {
    button.addEventListener('click', function() {
        const appointmentId = this.dataset.appointmentId;
        fetch(`/appointments/${appointmentId}/response`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ response: 'rejected' }),
        })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Appointment rejected successfully.');
                    } else {
                        alert('Failed to reject appointment.');
                    }
                });
    });
});
function toggleFormVisibility(form) {
    if (form.style.display === 'none' || form.style.display === '') {
        form.style.display = 'flex';
        form.style.flexDirection = 'column';
        form.style.border = '1px solid black';
        form.style.padding = '10px';

    } else {
        form.style.display = 'none';
    }
}
// public/js/appointments.js
document.querySelectorAll('.edit-appointment').forEach(button => {
    button.addEventListener('click', function() {
        const appointmentId = this.dataset.id;
        const form = document.querySelector(`.edit-appointment-form input[name="id"][value="${appointmentId}"]`).parentElement;
        toggleFormVisibility(form);
    });
});



document.querySelectorAll('.edit-appointment-form').forEach(form => {
    form.addEventListener('submit', function(event) {
        event.preventDefault();
        const appointmentId = this.querySelector('input[name="id"]').value;
        const title = this.querySelector('input[name="title"]').value;
        const date = this.querySelector('input[name="date"]').value;
        const time = this.querySelector('input[name="time"]').value;
        // const user_participants = this.querySelector('input[name="user_participants"]').value;
        fetch(`/appointments/${appointmentId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ title, date, time, user_participants }),
        })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update the appointment details in the DOM
                        // const appointmentContainer = this.parentElement;
                        // appointmentContainer.querySelector('.title').textContent = title;
                        // appointmentContainer.querySelector('.date').textContent = date;
                        // appointmentContainer.querySelector('.time').textContent = time;
                        // appointmentContainer.querySelector('.user_participants').textContent = user_participants;
                        // refresh the page
                        window.location.reload();
                        this.style.display = 'none';
                    } else {
                        // Show an error message
                        alert('Failed to update appointment');
                    }
                });
    });
});

// public/js/appointments.js
document.querySelectorAll('.remove-appointment').forEach(button => {
    button.addEventListener('click', function() {
        const appointmentId = this.dataset.id;
        fetch(`/appointments/${appointmentId}`, {
            method: 'DELETE',
        })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove the appointment from the DOM
                        window.location.reload();
                    } else {
                        // Show an error message
                        alert('Failed to remove appointment');
                    }
                });
    });
});
</script>